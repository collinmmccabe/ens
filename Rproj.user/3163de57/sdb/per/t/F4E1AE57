{
    "collab_server" : "",
    "contents" : "##################\n#    Disease     #\n#  Transmission  #\n#   Algorithms   #\n##################\n\n#-------#\n#  SIS  #\n#-------#\n\nsim_SIS <- function(network_el, beta, gamma, intxn_per_day, days) {\n\n  n = network_el[1,4]\n  e = network_el[1,5]\n  cdata <- network_el[,1:2]\n\n  infection_status <- c(rep(1,n))\n  index_infected <- sample(1:n, 1)\n  infection_status[index_infected] = 2\n\n  day_counter <- 0\n  while(day_counter <= days) {\n\n    int_counter <- 0\n    while(int_counter <= intxn_per_day*n) {\n\n      selected_edge <- sample(1:e,1)\n\n      if (sum(infection_status[cdata[selected_edge,1:2]]) == 3) {\n        if (beta >= runif(1,0,1)) {\n          infection_status[cdata[selected_edge,1:2]] = 2\n        }\n      }\n\n      int_counter <- sum(int_counter,1)\n    }\n\n    for (j in which(infection_status %in% 2)) {\n      if (gamma >= runif(1,0,1)) {\n        infection_status[j] = 1\n      }\n    }\n    day_counter <- sum(day_counter,1)\n    if (sum(infection_status%%2) == n) break\n  }\n  return(c(day_counter-1,sum(infection_status == 1),sum(infection_status == 2)))\n}\n\n\n#------#\n#  SI  #\n#------#\n\nsim_SI <- function(network_el, beta, intxn_per_day, days) {\n\n  n = network_el[1,4]\n  e = network_el[1,5]\n  cdata <- network_el[,1:2]\n\n  infection_status <- c(rep(1,n))\n  index_infected <- sample(1:n, 1)\n  infection_status[index_infected] = 2\n\n  day_counter <- 0\n  while(day_counter <= days) {\n\n    int_counter <- 0\n    while(int_counter <= intxn_per_day*n) {\n\n      selected_edge <- sample(1:e,1)\n\n      if (sum(infection_status[cdata[selected_edge,1:2]]) == 3) {\n        if (beta >= runif(1,0,1)) {\n          infection_status[cdata[selected_edge,1:2]] = 2\n        }\n      }\n\n      int_counter <- sum(int_counter,1)\n    }\n\n    day_counter = day_counter+1\n    if (sum(infection_status%%2) == 0) break\n  }\n  return(c(day_counter-1,sum(infection_status == 1),sum(infection_status == 2)))\n}\n\n\n#-------#\n#  STD  #\n#-------#\n\nsim_STD <- function(network_el, beta, intxn_per_day, days, MM, MF, FM, FF) {\n\n  n = network_el[1,4]\n  e = network_el[1,5]\n  cdata <- network_el[,1:2]\n  sexes <- network_el[1:n,6]\n\n  infection_status <- c(rep(1,n))\n  index_infected <- sample(1:n, 1)\n  infection_status[index_infected] = 2\n\n  day_counter <- 0\n  while(day_counter <= days) {\n\n    int_counter <- 0\n    while(int_counter <= intxn_per_day*n) {\n\n      selected_edge <- sample(1:e,1)\n\n      if (sum(infection_status[cdata[selected_edge,1:2]]) == 3) {\n        sex_ind = 0; beta_mod = 0\n        if (infection_status[cdata[selected_edge,1]] == 2) {\n          sex_ind <- (sexes[cdata[selected_edge,1]] * 2) - sexes[cdata[selected_edge,2]] + 1\n        } else {\n          sex_ind <- (sexes[cdata[selected_edge,2]] * 2) - sexes[cdata[selected_edge,1]] + 1\n        }\n\n        switch(sex_ind, {beta_mod <- beta * MF}, {beta_mod <- beta * MM}, {beta_mod <- beta * FF}, {beta_mod <- beta * FM})\n\n        if (beta_mod >= runif(1,0,1)) {\n          infection_status[cdata[selected_edge,1:2]] = 2\n        }\n      }\n\n      int_counter <- sum(int_counter,1)\n    }\n\n    day_counter <- sum(day_counter,1)\n    if (sum(infection_status%%2) == 0) break\n  }\n  return(c(day_counter-1,sum(infection_status == 1),sum(infection_status == 2)))\n}\n\n\n#-------#\n#  SIR  #\n#-------#\n\nsim_SIR <- function(network_el, beta, gamma, intxn_per_day, days) {\n\n  n = network_el[1,4]\n  e = network_el[1,5]\n  cdata <- network_el[,1:2]\n\n  infection_status <- c(rep(1,n))\n  index_infected <- sample(1:n, 1)\n  infection_status[index_infected] = 2\n\n  max_infected <- 1\n\n  day_counter <- 0\n  while(day_counter <= days) {\n\n    int_counter <- 0\n    while(int_counter <= intxn_per_day*n) {\n\n      selected_edge <- sample(1:e,1)\n\n      if (sum(infection_status[cdata[selected_edge,1:2]]) == 3) {\n        if (beta >= runif(1,0,1)) {\n          infection_status[cdata[selected_edge,1:2]] = 2\n        }\n      }\n\n      int_counter <- sum(int_counter,1)\n    }\n\n    for (j in which(infection_status %in% 2)) {\n      if (gamma >= runif(1,0,1)) {\n        infection_status[j] = 3\n      }\n    }\n\n    curr_infected <- sum(infection_status == 2)\n    if (curr_infected > max_infected) {\n      max_infected <- curr_infected\n    }\n\n    day_counter <- sum(day_counter,1)\n\n    if (sum(infection_status%%2) == n) break\n  }\n  return(c(day_counter-1,sum(infection_status == 1),sum(infection_status == 2),sum(infection_status == 3),max_infected))\n}\n\n\n#---------------#\n#  Weighted SI  #\n#---------------#\n\nsim_SI_w <- function(network_el, beta, intxn_per_day, days) {\n\n  n = network_el[1,4]\n  e = network_el[1,5]\n  cdata <- network_el[,1:3]\n  e <- cdata[,3]\n  edgeweight_sum <- sum(e)\n\n  infection_status <- c(rep(1,n))\n  index_infected <- sample(1:n, 1)\n  infection_status[index_infected] = 2\n\n  day_counter <- 0\n  while(day_counter <= days) {\n\n    int_counter <- 0\n    while(int_counter <= intxn_per_day*n) {\n\n      r <- runif(1,0,edgeweight_sum)\n      for (i in 1:length(e)) {\n        if (sum(e[1:i]) > r) {\n          selected_edge = i\n          break\n        }\n      }\n\n      if (sum(infection_status[cdata[selected_edge,1:2]]) == 3) {\n        if (beta >= runif(1,0,1)) {\n          infection_status[cdata[selected_edge,1:2]] = 2\n        }\n      }\n\n      int_counter <- sum(int_counter,1)\n    }\n\n    day_counter = day_counter+1\n    if (sum(infection_status%%2) == 0) break\n  }\n  return(c(day_counter-1,sum(infection_status == 1),sum(infection_status == 2)))\n}\n\n\n#----------------#\n#  Weighted SIR  #\n#----------------#\n\nsim_SIR_w <- function(network_el, beta, gamma, intxn_per_day, days) {\n\n  n = network_el[1,4]\n  e = network_el[1,5]\n  cdata <- network_el[,1:3]\n  e <- cdata[,3]\n  edgeweight_sum <- sum(e)\n\n  infection_status <- c(rep(1,n))\n  index_infected <- sample(1:n, 1)\n  infection_status[index_infected] = 2\n\n  max_infected <- 1\n\n  day_counter <- 0\n  while(day_counter <= days) {\n\n    int_counter <- 0\n    while(int_counter <= intxn_per_day*n) {\n\n      r <- runif(1,0,edgeweight_sum)\n      for (i in 1:length(e)) {\n        if (sum(e[1:i]) > r) {\n          selected_edge = i\n          break\n        }\n      }\n\n      if (sum(infection_status[cdata[selected_edge,1:2]]) == 3) {\n        if (beta >= runif(1,0,1)) {\n          infection_status[cdata[selected_edge,1:2]] = 2\n        }\n      }\n\n      int_counter <- sum(int_counter,1)\n    }\n\n    for (j in which(infection_status %in% 2)) {\n      if (gamma >= runif(1,0,1)) {\n        infection_status[j] = 3\n      }\n    }\n\n    curr_infected <- sum(infection_status == 2)\n    if (curr_infected > max_infected) {\n      max_infected <- curr_infected\n    }\n\n    day_counter <- sum(day_counter,1)\n\n    if (sum(infection_status%%2) == n) break\n  }\n  return(c(day_counter-1,sum(infection_status == 1),sum(infection_status == 2),sum(infection_status == 3),max_infected))\n}\n\n\n#--------------#\n#  Uniform SI  #\n#--------------#\n\nsim_SI_unif <- function(network_el, beta, days) {\n\n  n = network_el[1,4]\n  e = network_el[1,5]\n  cdata <- network_el[,1:2]\n\n  infection_status <- c(rep(1,n))\n  index_infected <- sample(1:n, 1)\n  infection_status[index_infected] = 2\n\n  day_counter <- 0\n  while(day_counter <= days) {\n\n    tmp_infection_status <- infection_status\n    for(selected_edge in 1:e) {\n\n      if (sum(infection_status[cdata[selected_edge,1:2]]) == 3) {\n        if (beta >= runif(1,0,1)) {\n          tmp_infection_status[cdata[selected_edge,1:2]] = 2\n        }\n      }\n\n    }\n\n    infection_status <- tmp_infection_status\n    day_counter = day_counter+1\n    if (sum(infection_status%%2) == 0) break\n  }\n  return(c(day_counter-1,sum(infection_status == 1),sum(infection_status == 2)))\n}\n\n\n#---------------#\n#  Uniform SIR  #\n#---------------#\n\nsim_SIR_unif <- function(network_el, beta, gamma, days) {\n\n  n = network_el[1,4]\n  e = network_el[1,5]\n  cdata <- network_el[,1:2]\n\n  infection_status <- c(rep(1,n))\n  index_infected <- sample(1:n, 1)\n  infection_status[index_infected] = 2\n\n  max_infected <- 1\n\n  day_counter <- 0\n  while(day_counter <= days) {\n\n    tmp_infection_status <- infection_status\n    for(selected_edge in 1:e) {\n\n      if (sum(infection_status[cdata[selected_edge,1:2]]) == 3) {\n        if (beta >= runif(1,0,1)) {\n          tmp_infection_status[cdata[selected_edge,1:2]] = 2\n        }\n      }\n\n    }\n\n    for (j in which(infection_status %in% 2)) {\n      if (gamma >= runif(1,0,1)) {\n        tmp_infection_status[j] = 3\n      }\n    }\n\n    infection_status <- tmp_infection_status\n    curr_infected <- sum(infection_status == 2)\n    if (curr_infected > max_infected) {\n      max_infected <- curr_infected\n    }\n\n    day_counter <- sum(day_counter,1)\n    if (sum(infection_status%%2) == n) break\n  }\n  return(c(day_counter-1,sum(infection_status == 1),sum(infection_status == 2),sum(infection_status == 3),max_infected))\n}\n",
    "created" : 1495132309354.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2768446644",
    "id" : "F4E1AE57",
    "lastKnownWriteTime" : 1491927728,
    "last_content_update" : 1491927728,
    "path" : "D:/Dropbox/Research/Effective Network Modeling/Effective_Network_Size/code/algorithms.R",
    "project_path" : "code/algorithms.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}